import { useRef, useCallback } from 'react'

// Type pour ReCAPTCHA (√©vite les erreurs TypeScript)
type ReCAPTCHAInstance = {
  executeAsync: () => Promise<string | null>
  reset: () => void
}

// Fonction utilitaire pour ajouter un timeout √† une promesse
const withTimeout = <T>(promise: Promise<T>, timeoutMs: number): Promise<T> => {
  return Promise.race([
    promise,
    new Promise<T>((_, reject) => 
      setTimeout(() => reject(new Error(`Timeout apr√®s ${timeoutMs}ms`)), timeoutMs)
    )
  ])
}

export const useRecaptcha = () => {
  const recaptchaRef = useRef<ReCAPTCHAInstance | null>(null)

  const executeRecaptchaAction = useCallback(async (action: string = 'submit'): Promise<string | null> => {
    console.log('üîß executeRecaptchaAction appel√© avec action:', action)
    console.log('üîß recaptchaRef.current:', recaptchaRef.current)
    console.log('üîß RECAPTCHA_SITE_KEY pr√©sent:', !!process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY)
    
    // Si pas de cl√© reCAPTCHA configur√©e, retourner le token de d√©veloppement
    if (!process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY) {
      console.log('üîß Pas de cl√© reCAPTCHA - retour token de d√©veloppement')
      return 'dev-token-bypass'
    }
    
    // Si reCAPTCHA pas encore initialis√©, retourner le token de d√©veloppement
    if (!recaptchaRef.current) {
      console.log('üîß reCAPTCHA not ready - retour token de d√©veloppement')
      return 'dev-token-bypass'
    }

    try {
      console.log('üîß Tentative d\'ex√©cution reCAPTCHA avec timeout de 10s...')
      
      // Ajouter un timeout de 10 secondes pour √©viter le blocage infini
      const token = await withTimeout(
        recaptchaRef.current.executeAsync(),
        10000 // 10 secondes
      )
      
      console.log('üîß Token reCAPTCHA re√ßu:', token ? 'Token valide' : 'Token null')
      return token || 'dev-token-bypass'
    } catch (error) {
      console.error('üîß Erreur reCAPTCHA:', error)
      
      // Si c'est un timeout ou une erreur, utiliser le token de d√©veloppement
      if (error instanceof Error && error.message.includes('Timeout')) {
        console.log('üîß Timeout reCAPTCHA - utilisation token de d√©veloppement')
      }
      
      return 'dev-token-bypass' // Fallback en cas d'erreur
    }
  }, [])

  const resetRecaptcha = useCallback(() => {
    if (recaptchaRef.current) {
      recaptchaRef.current.reset()
    }
  }, [])

  // En d√©veloppement, consid√©rer comme pr√™t
  const isRecaptchaReady = true

  return {
    recaptchaRef,
    executeRecaptchaAction,
    resetRecaptcha,
    isRecaptchaReady
  }
}
