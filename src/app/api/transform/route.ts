import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import {
  STABILITY_CONFIG,
  validateAIConfig
} from '@/lib/ai-config';
import {
  TRANSFORMATION_TYPES,
  type GenerationResponse
} from '@/lib/types';
import {
  uploadImageToGCS,
  checkImageExists,
  downloadImageAsBuffer,
  generateFileName
} from '@/lib/storage';

// Rate limiting simple (en m√©moire)
const rateLimitMap = new Map<string, { count: number; timestamp: number }>();
const RATE_LIMIT = {
  maxRequests: 5,
  windowMs: 60 * 1000, // 1 minute
};

function checkRateLimit(ip: string): boolean {
  const now = Date.now();
  const record = rateLimitMap.get(ip);

  if (!record || now - record.timestamp > RATE_LIMIT.windowMs) {
    // Reset ou nouvelle entr√©e
    rateLimitMap.set(ip, { count: 1, timestamp: now });
    return true;
  }

  if (record.count >= RATE_LIMIT.maxRequests) {
    return false; // Rate limit d√©pass√©
  }

  record.count++;
  return true;
}

async function getBaseImageAsBuffer(): Promise<Buffer> {
  try {
    // Chemin vers l'image de l'√©glise dans public/images
    const imagePath = path.join(process.cwd(), 'public', 'images', 'Saint-Gildas-Auray-768x576.webp');
    
    // Lire l'image comme buffer
    const imageBuffer = await fs.readFile(imagePath);
    return imageBuffer;
  } catch (error) {
    console.error('Error reading base church image:', error);
    throw new Error('Failed to load base church image');
  }
}

async function generateWithStabilityAI(
  baseImageBuffer: Buffer,
  prompt: string
): Promise<{ imageUrl: string; cost: number }> {
  try {
    validateAIConfig();

    // Cr√©er FormData pour l'API Stability AI
    const formData = new FormData();
    
    // Ajouter l'image de base
    const imageBlob = new Blob([baseImageBuffer], { type: 'image/webp' });
    formData.append('init_image', imageBlob);
    
    // Ajouter les param√®tres
    formData.append('text_prompts[0][text]', prompt);
    formData.append('text_prompts[0][weight]', '1');
    formData.append('cfg_scale', STABILITY_CONFIG.GENERATION.cfg_scale.toString());
    formData.append('image_strength', STABILITY_CONFIG.GENERATION.image_strength.toString());
    formData.append('steps', STABILITY_CONFIG.GENERATION.steps.toString());
    formData.append('samples', '1');
    formData.append('style_preset', STABILITY_CONFIG.GENERATION.style_preset);
    formData.append('sampler', STABILITY_CONFIG.GENERATION.sampler);

    const response = await fetch(STABILITY_CONFIG.API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.STABILITY_API_KEY}`,
        'Accept': 'application/json',
      },
      body: formData,
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Stability AI API Error:', response.status, errorText);
      throw new Error(`Stability AI API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.artifacts || data.artifacts.length === 0) {
      throw new Error('No image generated by Stability AI');
    }

    // L'image est retourn√©e en base64
    const base64Image = data.artifacts[0].base64;
    const imageBuffer = Buffer.from(base64Image, 'base64');
    
    // Cr√©er une URL temporaire (data URL) pour l'image
    const dataUrl = `data:image/png;base64,${base64Image}`;
    
    return {
      imageUrl: dataUrl,
      cost: STABILITY_CONFIG.PRICING.per_generation
    };

  } catch (error) {
    console.error('Stability AI generation error:', error);
    throw error;
  }
}

export async function POST(request: NextRequest) {
  const startTime = Date.now();
  
  try {
    // V√©rification du rate limiting
    const ip = request.ip || request.headers.get('x-forwarded-for') || 'unknown';
    if (!checkRateLimit(ip)) {
      return NextResponse.json(
        { 
          error: 'Rate limit exceeded. Please wait before making another request.',
          success: false 
        },
        { status: 429 }
      );
    }

    // Parse du body
    const body = await request.json();
    const { transformationType, customPrompt } = body;

    // Validation des param√®tres
    if (!transformationType) {
      return NextResponse.json(
        { error: 'transformationType is required', success: false },
        { status: 400 }
      );
    }

    // Trouver la configuration de transformation dans le tableau
    const transformationConfig = TRANSFORMATION_TYPES.find(t => t.id === transformationType);
    if (!transformationConfig) {
      return NextResponse.json(
        { error: 'Invalid transformation type', success: false },
        { status: 400 }
      );
    }

    console.log(`üé® Starting img2img transformation: ${transformationType}`);

    // G√©n√©rer le nom de fichier pour la v√©rification cache
    const fileName = generateFileName(transformationType, customPrompt);
    
    // V√©rifier si l'image existe d√©j√† dans GCS
    const existingImageUrl = await checkImageExists(fileName);
    if (existingImageUrl) {
      console.log(`‚úÖ Image found in cache: ${fileName}`);
      const generationTime = Date.now() - startTime;
      
      return NextResponse.json({
        success: true,
        imageUrl: existingImageUrl,
        generationTime,
        cost: 0, // Pas de co√ªt pour une image en cache
        cached: true,
        transformation: transformationConfig
      } as GenerationResponse);
    }

    // Obtenir l'image de base de l'√©glise
    const baseImageBuffer = await getBaseImageAsBuffer();
    console.log(`üì∏ Base image loaded: ${baseImageBuffer.length} bytes`);

    // G√©n√©rer le prompt optimis√©
    const prompt = customPrompt || transformationConfig.prompt;
    console.log(`üìù Prompt: ${prompt.substring(0, 100)}...`);

    // G√©n√©rer l'image avec Stability AI
    const { imageUrl: tempImageUrl, cost } = await generateWithStabilityAI(
      baseImageBuffer,
      prompt
    );

    console.log(`üé® Image generated successfully`);

    // Uploader vers Google Cloud Storage
    let finalImageUrl = tempImageUrl;
    try {
      // Extraire le buffer de l'image de la data URL
      const base64Data = tempImageUrl.replace(/^data:image\/[a-z]+;base64,/, '');
      const imageBuffer = Buffer.from(base64Data, 'base64');
      
      // Appeler uploadImageToGCS avec le bon type de contenu
      const storageResult = await uploadImageToGCS(
        imageBuffer, 
        fileName
      );
    
      // Utiliser l'URL GCS si le t√©l√©chargement a r√©ussi
      if (storageResult.success && storageResult.url) {
        finalImageUrl = storageResult.url;
        console.log(`‚òÅÔ∏è Image uploaded to GCS: ${fileName}`);
      } else {
        console.warn('‚ö†Ô∏è GCS upload failed, using fallback data URL');
      }
    } catch (error) {
      console.error('‚ùå GCS Upload Error:', error);
      // Continuer avec l'URL temporaire en fallback
    }

    const generationTime = Date.now() - startTime;

    return NextResponse.json({
      success: true,
      imageUrl: finalImageUrl,
      generationTime,
      cost,
      cached: false,
      transformation: transformationConfig
    } as GenerationResponse);

  } catch (error) {
    console.error('API Error:', error);
    
    const generationTime = Date.now() - startTime;
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : 'An unexpected error occurred',
      generationTime
    } as GenerationResponse, { 
      status: 500 
    });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Church Transformation API with Stability AI img2img',
    availableTransformations: Object.keys(TRANSFORMATION_TYPES),
    pricing: STABILITY_CONFIG.PRICING,
    rateLimit: RATE_LIMIT
  });
}
