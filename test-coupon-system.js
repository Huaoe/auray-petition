/**
 * Script de test pour le syst√®me de coupons avanc√©
 * Usage: node test-coupon-system.js
 */

// Simulation des fonctions du syst√®me de coupons (version Node.js)
const COUPON_CONFIG = {
  expirationDays: 30,
  codeLength: 12,
  
  engagementLevels: {
    BASIC: {
      name: 'Supporter',
      minScore: 0,
      maxScore: 49,
      generations: 2,
      color: '#6B7280',
      badge: 'üå±'
    },
    ENGAGED: {
      name: 'Engag√©',
      minScore: 50,
      maxScore: 99,
      generations: 3,
      color: '#3B82F6',
      badge: '‚≠ê'
    },
    PASSIONATE: {
      name: 'Passionn√©',
      minScore: 100,
      maxScore: 199,
      generations: 4,
      color: '#8B5CF6',
      badge: 'üî•'
    },
    CHAMPION: {
      name: 'Champion',
      minScore: 200,
      maxScore: Infinity,
      generations: 5,
      color: '#F59E0B',
      badge: 'üëë'
    }
  },
  
  scoring: {
    baseSignature: 10,
    commentLength: {
      short: 5,
      medium: 15,
      long: 25
    },
    newsletter: 10,
    socialShare: 20,
    referral: 30
  }
};

function generateCouponCode() {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  
  for (let i = 0; i < COUPON_CONFIG.codeLength; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    result += characters[randomIndex];
  }
  
  return result;
}

function calculateEngagementScore(signatureData) {
  let score = COUPON_CONFIG.scoring.baseSignature;
  
  // Score pour commentaire
  if (signatureData.comment && signatureData.comment.trim()) {
    const commentLength = signatureData.comment.trim().length;
    if (commentLength < 50) {
      score += COUPON_CONFIG.scoring.commentLength.short;
    } else if (commentLength <= 150) {
      score += COUPON_CONFIG.scoring.commentLength.medium;
    } else {
      score += COUPON_CONFIG.scoring.commentLength.long;
    }
  }
  
  // Score pour newsletter
  if (signatureData.newsletterConsent) {
    score += COUPON_CONFIG.scoring.newsletter;
  }
  
  // Score pour partages sociaux
  if (signatureData.socialShares) {
    score += signatureData.socialShares * COUPON_CONFIG.scoring.socialShare;
  }
  
  // Score pour parrainages
  if (signatureData.referrals) {
    score += signatureData.referrals * COUPON_CONFIG.scoring.referral;
  }
  
  return score;
}

function determineEngagementLevel(score) {
  for (const [level, config] of Object.entries(COUPON_CONFIG.engagementLevels)) {
    if (score >= config.minScore && score <= config.maxScore) {
      return {
        level,
        name: config.name,
        badge: config.badge,
        color: config.color,
        generations: config.generations
      };
    }
  }
  
  return COUPON_CONFIG.engagementLevels.BASIC;
}

function createSmartCoupon(email, signatureData) {
  const score = calculateEngagementScore(signatureData);
  const engagementInfo = determineEngagementLevel(score);
  
  const coupon = {
    id: generateCouponCode(),
    email,
    generationsRemaining: engagementInfo.generations,
    totalGenerations: engagementInfo.generations,
    createdAt: new Date().toISOString(),
    expiresAt: new Date(Date.now() + COUPON_CONFIG.expirationDays * 24 * 60 * 60 * 1000).toISOString(),
    used: false,
    engagementScore: score,
    engagementLevel: engagementInfo.level,
    levelName: engagementInfo.name,
    levelBadge: engagementInfo.badge,
    levelColor: engagementInfo.color,
    signatureData
  };
  
  return coupon;
}

// Tests du syst√®me
console.log('üß™ TESTS DU SYST√àME DE COUPONS AVANC√â\n');

// Test 1: Signature basique
console.log('üìù Test 1: Signature basique');
const basicSignature = {
  comment: '',
  newsletterConsent: false,
  socialShares: 0,
  referrals: 0
};
const basicCoupon = createSmartCoupon('test1@example.com', basicSignature);
console.log(`   Score: ${basicCoupon.engagementScore}`);
console.log(`   Niveau: ${basicCoupon.levelBadge} ${basicCoupon.levelName}`);
console.log(`   G√©n√©rations: ${basicCoupon.generationsRemaining}`);
console.log(`   Code: ${basicCoupon.id}\n`);

// Test 2: Signature engag√©e
console.log('üìù Test 2: Signature engag√©e (commentaire + newsletter)');
const engagedSignature = {
  comment: 'Je soutiens totalement cette p√©tition pour une meilleure qualit√© de vie √† Auray.',
  newsletterConsent: true,
  socialShares: 0,
  referrals: 0
};
const engagedCoupon = createSmartCoupon('test2@example.com', engagedSignature);
console.log(`   Score: ${engagedCoupon.engagementScore}`);
console.log(`   Niveau: ${engagedCoupon.levelBadge} ${engagedCoupon.levelName}`);
console.log(`   G√©n√©rations: ${engagedCoupon.generationsRemaining}`);
console.log(`   Code: ${engagedCoupon.id}\n`);

// Test 3: Signature passionn√©e
console.log('üìù Test 3: Signature passionn√©e (commentaire long + newsletter + partages)');
const passionateSignature = {
  comment: 'Cette p√©tition est absolument essentielle pour notre communaut√©. Les sonneries de cloches √† toute heure perturbent notre sommeil et notre qualit√© de vie. Il est temps de trouver un √©quilibre respectueux entre tradition et bien-√™tre des habitants. Je partage cette p√©tition avec tous mes contacts.',
  newsletterConsent: true,
  socialShares: 2,
  referrals: 0
};
const passionateCoupon = createSmartCoupon('test3@example.com', passionateSignature);
console.log(`   Score: ${passionateCoupon.engagementScore}`);
console.log(`   Niveau: ${passionateCoupon.levelBadge} ${passionateCoupon.levelName}`);
console.log(`   G√©n√©rations: ${passionateCoupon.generationsRemaining}`);
console.log(`   Code: ${passionateCoupon.id}\n`);

// Test 4: Signature champion
console.log('üìù Test 4: Signature champion (tout + parrainages)');
const championSignature = {
  comment: 'En tant que r√©sident de longue date d\'Auray, je suis profond√©ment pr√©occup√© par l\'impact des sonneries de cloches sur notre communaut√©. Cette p√©tition repr√©sente une opportunit√© unique de dialogue constructif entre les diff√©rentes parties prenantes. J\'ai personnellement contact√© plusieurs voisins et amis pour les sensibiliser √† cette cause importante.',
  newsletterConsent: true,
  socialShares: 3,
  referrals: 2
};
const championCoupon = createSmartCoupon('test4@example.com', championSignature);
console.log(`   Score: ${championCoupon.engagementScore}`);
console.log(`   Niveau: ${championCoupon.levelBadge} ${championCoupon.levelName}`);
console.log(`   G√©n√©rations: ${championCoupon.generationsRemaining}`);
console.log(`   Code: ${championCoupon.id}\n`);

// Test 5: Validation des seuils
console.log('üìä Test 5: Validation des seuils de scoring');
console.log('   Signature de base: 10 points');
console.log('   + Commentaire court (<50 chars): +5 points');
console.log('   + Commentaire moyen (50-150 chars): +15 points');
console.log('   + Commentaire long (>150 chars): +25 points');
console.log('   + Newsletter: +10 points');
console.log('   + Partage social: +20 points chacun');
console.log('   + Parrainage: +30 points chacun');
console.log('');
console.log('   Niveaux:');
console.log('   üå± BASIC (0-49): 2 g√©n√©rations');
console.log('   ‚≠ê ENGAGED (50-99): 3 g√©n√©rations');
console.log('   üî• PASSIONATE (100-199): 4 g√©n√©rations');
console.log('   üëë CHAMPION (200+): 5 g√©n√©rations');

console.log('\n‚úÖ TESTS TERMIN√âS - Syst√®me de coupons avanc√© fonctionnel !');
